h1. /data.mill for applications **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 

*Version:* 1.6.4

----

{toc:printable=true|style=square|minLevel=2|maxLevel=3|type=list|outline=false|include=.*}

h2. Endpoints

    h3. extractHouseNumber
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /address/housenumber/extract
    {code}
    *Summary:* Try to extract house number from street information
    *Description:* Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /address/housenumber/extract
        {code:title=Response Type}
AddressHouseNumberExtractResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /address/housenumber/extract",
  "schema" : {
    "$ref" : "#/definitions/AddressHouseNumberExtractResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. locateAddress
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /address/locate
    {code}
    *Summary:* Reverse address lookup
    *Description:* Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /address/locate
        {code:title=Response Type}
AddressSearchResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /address/locate",
  "schema" : {
    "$ref" : "#/definitions/AddressSearchResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. searchAddress
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /address/search
    {code}
    *Summary:* Lookup physical postal address
    *Description:* Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /address/search
        {code:title=Response Type}
AddressSearchResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /address/search",
  "schema" : {
    "$ref" : "#/definitions/AddressSearchResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. searchAddressMultiple
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /address/search/multiple
    {code}
    *Summary:* Address lookup with multiple possible results
    *Description:* Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /address/search/multiple
        {code:title=Response Type}
AddressSearchMultipleResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /address/search/multiple",
  "schema" : {
    "$ref" : "#/definitions/AddressSearchMultipleResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkBIC
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /bic/check
    {code}
    *Summary:* Check BIC for spelling
    *Description:* Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /bic/check
        {code:title=Response Type}
BicCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /bic/check",
  "schema" : {
    "$ref" : "#/definitions/BicCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. convertCapitalFirst
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /convert/capitalfirst
    {code}
    *Summary:* Convert any string to capitalize words
    *Description:* Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /convert/capitalfirst
        {code:title=Response Type}
ConvertCapitalFirstResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /convert/capitalfirst",
  "schema" : {
    "$ref" : "#/definitions/ConvertCapitalFirstResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. convertLowerCase
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /convert/lowercase
    {code}
    *Summary:* Convert any string to lower case
    *Description:* Converts all letters of any word in a given string in the respective lowercase. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /convert/lowercase
        {code:title=Response Type}
ConvertLowerCaseResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /convert/lowercase",
  "schema" : {
    "$ref" : "#/definitions/ConvertLowerCaseResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. convertUpperCase
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /convert/uppercase
    {code}
    *Summary:* Convert any string to upper case
    *Description:* Converts all letters of any word in a given string in the respective capital. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /convert/uppercase
        {code:title=Response Type}
ConvertUpperCaseResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /convert/uppercase",
  "schema" : {
    "$ref" : "#/definitions/ConvertUpperCaseResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. convertWrap
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /convert/wrap
    {code}
    *Summary:* Wrap text
    *Description:* Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /convert/wrap
        {code:title=Response Type}
ConvertWrapResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /convert/wrap",
  "schema" : {
    "$ref" : "#/definitions/ConvertWrapResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. getDUNSRating
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /business-data/duns/rating
    {code}
    *Summary:* Get marketing information by DUNS number
    *Description:* Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /business-data/duns/rating
        {code:title=Response Type}
BusinessDataDunsRatingResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /business-data/duns/rating",
  "schema" : {
    "$ref" : "#/definitions/BusinessDataDunsRatingResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. resolveDUNS
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /business-data/duns/resolve
    {code}
    *Summary:* Resolve company information by DUNS number
    *Description:* Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /business-data/duns/resolve
        {code:title=Response Type}
BusinessDataDunsResolveResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /business-data/duns/resolve",
  "schema" : {
    "$ref" : "#/definitions/BusinessDataDunsResolveResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. searchDUNS
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /business-data/duns/search
    {code}
    *Summary:* Find DUNS number and company information by name
    *Description:* Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /business-data/duns/search
        {code:title=Response Type}
BusinessDataDunsSearchResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /business-data/duns/search",
  "schema" : {
    "$ref" : "#/definitions/BusinessDataDunsSearchResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. searchUndeliverableContact
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /business-data/undeliverable-contacts/search
    {code}
    *Summary:* Find moved and deceased contacts
    *Description:* Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /business-data/undeliverable-contacts/search
        {code:title=Response Type}
BusinessDataUndeliverableContactsResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /business-data/undeliverable-contacts/search",
  "schema" : {
    "$ref" : "#/definitions/BusinessDataUndeliverableContactsResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkEmailDomain
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /email/domain/check
    {code}
    *Summary:* Check email syntax and mail server domain
    *Description:* Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /email/domain/check
        {code:title=Response Type}
EmailDomainCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /email/domain/check",
  "schema" : {
    "$ref" : "#/definitions/EmailDomainCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkEmailMailbox
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /email/extended/check
    {code}
    *Summary:* Check email syntax, mail server domain and mailbox itself
    *Description:* Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /email/extended/check
        {code:title=Response Type}
EmailExtendedCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /email/extended/check",
  "schema" : {
    "$ref" : "#/definitions/EmailExtendedCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkEmailSyntax
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /email/syntax/check
    {code}
    *Summary:* Check email syntax
    *Description:* Checks the spelling of an email address to detect typos and spelling errors. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /email/syntax/check
        {code:title=Response Type}
EmailSyntaxCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /email/syntax/check",
  "schema" : {
    "$ref" : "#/definitions/EmailSyntaxCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. getFirstNames
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /firstname/get
    {code}
    *Summary:* Recognize and extract first names
    *Description:* Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /firstname/get
        {code:title=Response Type}
FirstNameGetResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /firstname/get",
  "schema" : {
    "$ref" : "#/definitions/FirstNameGetResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. getGender
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /gender/get
    {code}
    *Summary:* Recognize gender by first name
    *Description:* Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /gender/get
        {code:title=Response Type}
GenderGetResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /gender/get",
  "schema" : {
    "$ref" : "#/definitions/GenderGetResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. getGenderExtended
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /gender/extended/get
    {code}
    *Summary:* Recognize gender by first name (advanced)
    *Description:* Recognizes the gender of a given first name considering country specific peculiarities.


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /gender/extended/get
        {code:title=Response Type}
GenderExtendedGetResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /gender/extended/get",
  "schema" : {
    "$ref" : "#/definitions/GenderExtendedGetResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkIBAN
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /iban/check
    {code}
    *Summary:* Check IBAN for spelling
    *Description:* Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /iban/check
        {code:title=Response Type}
IbanCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /iban/check",
  "schema" : {
    "$ref" : "#/definitions/IbanCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkMobilePhone
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /phone/mobile/check
    {code}
    *Summary:* Verify mobile phone number
    *Description:* Real time validation of mobile numbers without triggering a call of send a text message.


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /phone/mobile/check
        {code:title=Response Type}
PhoneMobileCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /phone/mobile/check",
  "schema" : {
    "$ref" : "#/definitions/PhoneMobileCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. formatPhoneNumber
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /phone/format
    {code}
    *Summary:* Parse, format and validate phone numbers
    *Description:* Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /phone/format
        {code:title=Response Type}
PhoneFormatResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /phone/format",
  "schema" : {
    "$ref" : "#/definitions/PhoneFormatResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. getPhoneCountryCode
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /phone/countrycode/get
    {code}
    *Summary:* International and national dial prefix
    *Description:* Resolves the national and international dial prefix for a country specified by the given ISO country code.


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /phone/countrycode/get
        {code:title=Response Type}
PhoneCountryCodeGetResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /phone/countrycode/get",
  "schema" : {
    "$ref" : "#/definitions/PhoneCountryCodeGetResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkUrl
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /url/check
    {code}
    *Summary:* Information about web resources
    *Description:* Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /url/check
        {code:title=Response Type}
UrlCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /url/check",
  "schema" : {
    "$ref" : "#/definitions/UrlCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. checkVAT
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /vat/check
    {code}
    *Summary:* Check vat number for correctness
    *Description:* Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /vat/check
        {code:title=Response Type}
VatCheckResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /vat/check",
  "schema" : {
    "$ref" : "#/definitions/VatCheckResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. resolveVAT
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /vat/resolve
    {code}
    *Summary:* Try to resolve VAT number to company information
    *Description:* Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /vat/resolve
        {code:title=Response Type}
VatResolveResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /vat/resolve",
  "schema" : {
    "$ref" : "#/definitions/VatResolveResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

    h3. searchVAT
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /vat/search
    {code}
    *Summary:* Find VAT number and company information by name
    *Description:* Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     Response for successful transformation of /vat/search
        {code:title=Response Type}
VatSearchResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Response for successful transformation of /vat/search",
  "schema" : {
    "$ref" : "#/definitions/VatSearchResponse"
  }
}
        {code}
        *Status Code:* 401
        *Message:*     Unauthorized error
        {code:title=Response Type}
ErrorUnauthorized
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unauthorized error",
  "schema" : {
    "$ref" : "#/definitions/ErrorUnauthorized"
  }
}
        {code}
        *Status Code:* 402
        *Message:*     Quota exceeded error
        {code:title=Response Type}
ErrorQuotaExceeded
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Quota exceeded error",
  "schema" : {
    "$ref" : "#/definitions/ErrorQuotaExceeded"
  }
}
        {code}
        *Status Code:* 403
        *Message:*     Forbidden error
        {code:title=Response Type}
ErrorForbidden
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Forbidden error",
  "schema" : {
    "$ref" : "#/definitions/ErrorForbidden"
  }
}
        {code}
        *Status Code:* 404
        *Message:*     Not found error
        {code:title=Response Type}
ErrorNotFound
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not found error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotFound"
  }
}
        {code}
        *Status Code:* 405
        *Message:*     Not allowed error
        {code:title=Response Type}
ErrorNotAllowed
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Not allowed error",
  "schema" : {
    "$ref" : "#/definitions/ErrorNotAllowed"
  }
}
        {code}
        *Status Code:* 412
        *Message:*     Incorrect parameters error
        {code:title=Response Type}
ErrorIncorrectParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Incorrect parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorIncorrectParameters"
  }
}
        {code}
        *Status Code:* 428
        *Message:*     Missing parameters error
        {code:title=Response Type}
ErrorMissingParameters
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Missing parameters error",
  "schema" : {
    "$ref" : "#/definitions/ErrorMissingParameters"
  }
}
        {code}
        *Status Code:* 500
        *Message:*     Unexpected internal server error
        {code:title=Response Type}
ErrorInternalError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Unexpected internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorInternalError"
  }
}
        {code}
        *Status Code:* 503
        *Message:*     Internal server error
        {code:title=Response Type}
ErrorServiceUnavailable
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Internal server error",
  "schema" : {
    "$ref" : "#/definitions/ErrorServiceUnavailable"
  }
}
        {code}
    ----

h2. Models

        h3. AddressHouseNumberExtractResponse
        ||Field Name||Required||Type||Description||
         |street | |String |The extracted street name |
 |housenumber | |String |House number including additional house number information |
 |housenumber_only | |String |House number excluding additional house number information |
 |housenumber_addition | |String |Additional house number information |
        h3. AddressSearchMultipleResponse
        ||Field Name||Required||Type||Description||
         |addresses | |array[AddressSearchResponse] |Collection of geo-locations which matches the given address information. Each record has the same structure as the response of the Address Lookup. |
        h3. AddressSearchResponse
        ||Field Name||Required||Type||Description||
         |country_iso_2 | |String |ISO 3166-1 alpha-2 country code |
 |country_iso_3 | |String |ISO 3166-1 alpha-3 country code |
 |country | |String |Country name together with the language information |
 |state | |String |State name/code together with the language information |
 |state_name | |String |State name together with the language information |
 |state_code | |String |ISO 3166-2 state code (if available) |
 |county | |String |County name together with the language information (if available) |
 |district | |String |District name together with the language information (if available) |
 |zip | |String |Postal code |
 |city | |String |City name together with the language information |
 |street | |String |Street name together with the language information |
 |housenumber | |String |House number or building name together with the language information (if available) |
 |additional_data | |String |Additional house number information (e.g. floor, apartment, top) |
 |relevance | |String |Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance.  |
 |latitude | |String |Latitude to place a marker indicating the given location on a map (uses a dot as decimal point) |
 |longitude | |String |Longitude to place a marker indicating the given location on a map (uses a dot as decimal point) |
 |navigation_latitude | |String |Latitude of a potential route waypoint (uses a dot as decimal point) |
 |navigation_longitude | |String |Longitude of a potential route waypoint (uses a dot as decimal point) |
 |matchlevel | |String |The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...).  |
        h3. BicCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the spelling of the BIC/SWIFT code is valid or not [**0**, **1**]  |
 |bic | |String |The well formatted BIC/SWIFT code if valid. |
        h3. BusinessDataDunsRatingResponse
        ||Field Name||Required||Type||Description||
         |status | |String |Flag if a company was found by its D-U-N-S number or not [**0**, **1**]  |
 |status_description | |String |Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number**  |
 |duns_number | |String |The DUNS number of the company. The same ase the input parameter if company was found. |
 |company_name | |String |The company&#39;s official name |
 |continent_name | |String |Continent name of the company&#39;s headquarters |
 |country_code | |String |ISO 3166-1 alpha-2 country code of the company&#39;s headquarters |
 |country_code_3 | |String |ISO 3166-1 alpha-3 country code of the company&#39;s headquarters |
 |country_name | |String |Country name together with the language information |
 |zip | |String |Postal code of the company&#39;s headquarters |
 |city | |String |City of the company&#39;s headquarters |
 |street | |String |Street name of the company&#39;s headquarters |
 |house_number | |String |House number of the company&#39;s headquarters |
 |phone_number | |String |Phone number of the company&#39;s headquarters |
 |fax_number | |String |Fax number of the company&#39;s headquarters |
 |state_name | |String |State name of the company&#39;s headquarters |
 |ceo_name | |String |Name of the company&#39;s CEO (Chief Executive Officer) |
 |ceo_title | |String |Position / Business title of the company&#39;s CEO |
 |sic_code | |String |The company&#39;s international SIC (Standard Industrial Classification) code |
 |sic_description | |String |Description of the SIC code |
 |sic_version | |String |The version of SIC (either 1972, 1977 or 1987) |
 |year_started | |String |Year of establishment |
 |net_worth | |Integer |The company&#39;s net worth (net value) in its local currency (may be NULL if unset) |
 |currency_code | |String |The local currency code of the company&#39;s headquarters country |
 |currency_name | |String |The local currency name of the company&#39;s headquarters country |
 |total_employees | |Long |The total number of employees (may be NULL if unset) |
 |total_employees_indicator | |String |Indicator if subsidiaries are included or not **A**: subsidiaries are not included **B**: total value including subsidiaries  |
 |total_employees_indicator_description | |String |Description of the total number of employees indicator |
 |legal_form_code | |Long |Code of the company&#39;s legal form |
 |legal_form_description | |String |Description of the legal form code |
 |report_date | |date |Timestamp when the company&#39;s information were updated the last time |
 |is_out_of_business | |Boolean |Flag if the company is already out of business |
 |is_branch | |Boolean |Flag if the company found is a branch or the main headquarter |
 |business_registration_number | |String |Primary business identification number assigned to the business by government agency |
 |business_registration_type | |String |Type of identification number assigned to the business (e.g. Registration number, Judicial number, ...) |
 |incorporation_year | |String |Year business incorporated |
 |trade_styles | |array[String] |Array with other names of the company |
 |enquiry_duns | |String |The D-U-N-S number of the enquiry. May vary from the specified D-U-N-S number if the headquarters data are returned |
 |sales | |Long |Net sales for the period after returns, allowances and discounts are deducted (may be NULL if unset) |
 |sales_estimated_description | |String |Qualifies the annual sales volume (actual, estimated, forecast, projected or calculated) |
 |paydex_score | |Long |D&amp;B® PAYDEX® for the last 2 months experiences (not for all countries) (may be NULL if unset) |
 |paydex_score_description | |String |Description about the D&amp;B® PAYDEX® score (either Anticipate, Discount, Prompt, X days beyond terms or Unavailable) (may be NULL if unset) |
 |paydex_norm | |Long |Industry D&amp;B® PAYDEX® median or average (may be NULL if unset) |
 |intangible_assets | |Long |Total of intangible assets (may be NULL if unset) |
 |max_credit_recommendation | |Long |Maximum amount of credit recommended by Dun &amp; Bradstreet (Europe only) (may be NULL if unset) |
 |dub_rating | |String |Rating assigned by Dun &amp; Bradstreet (meaning varies by country) |
 |dub_rating_financial_strength | |String |Part of the Dun &amp; Bradstreet rating which indicates the financial strength of the business (from - to in USD) |
 |dub_rating_risk | |String |Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: minimal risk, **2**: low risk, **3**: greater than average risk, **4**: significant level of risk, **&lt;other values&gt;**: insufficient information to define a risk indicator  |
 |dub_rating_risk_description | |String |Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: proceed with transaction - offer terms required, **2**: proceed with transaction, **3**: process with transaction, but monitor closely, **4**: take suitable assurances before extending credit, **&lt;other values&gt;**: no public information or D&amp;B proprietary information  |
 |has_open_claims | |Boolean |Flag if open claims, legal claims, liens, protested bills or equivalent exists |
 |has_criminal_proceedings | |Boolean |Flag if criminal proceedings exists |
 |has_disaster_event | |Boolean |Flag if special events concerning disasters such as fire, hurricanes etc. exists |
 |has_financial_embarrassment | |Boolean |Flag if open bankruptcy, receivership liquidation or equivalent exists |
 |has_financial_legal_event | |Boolean |Flag if special events available including financial embarrassment and legal fillings exists |
 |has_special_event | |Boolean |Flag if special events are available concerning changes to operational aspects including name changes, management changes, etc. |
 |has_other_event | |Boolean |Flag if special events exists that are not otherwise specified |
 |has_secured_filings | |Boolean |Flag if open secured filing such as UCC filings, secured charges or equivalent exists |
 |has_lawsuit | |Boolean |Flag if open suit(s), judgement(s), petitions or payment remarks exists |
 |are_employees_estimated | |Boolean |Flag if the total number of employees is estimated or actual |
 |are_sales_estimated | |Boolean |Flag if the annual sales volume is estimated or actual |
        h3. BusinessDataDunsResolveResponse
        ||Field Name||Required||Type||Description||
         |status | |String |Flag if a company was found by its D-U-N-S number or not [**0*, **1**] |
 |status_description | |String |Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number**  |
 |company_name | |String |The company&#39;s official name |
 |company_name_2 | |String |The company&#39;s second name or \&quot;doing business as\&quot; |
 |continent_name | |String |Continent name of the company&#39;s headquarters |
 |country_code | |String |ISO 3166-1 alpha-2 country code of the company&#39;s headquarters |
 |country_code_3 | |String |ISO 3166-1 alpha-3 country code of the company&#39;s headquarters |
 |zip | |String |Postal code of the company&#39;s headquarters |
 |city | |String |City of the company&#39;s headquarters |
 |street | |String |Street name of the company&#39;s headquarters |
 |house_number | |String |House number of the company&#39;s headquarters |
 |phone_number | |String |Phone number of the company&#39;s headquarters |
 |fax_number | |String |Fax number of the company&#39;s headquarters |
 |state_name | |String |State name of the company&#39;s headquarters |
 |state_code | |String |ISO 3166-2 state code of the company&#39;s headquarters |
 |ceo_name | |String |Name of the company&#39;s CEO (Chief Executive Officer) |
 |ceo_title | |String |Position / Business title of the company&#39;s CEO |
 |ceo_secondary | |array[String] |Collection of names of further CEOs |
 |sic_code | |String |The company&#39;s international SIC (Standard Industrial Classification) code |
 |sic_description | |String |Description of the SIC code |
 |year_started | |String |Year of establishment |
 |annual_turnover_local_currency | |Long |The company&#39;s annual turnover in its local currency (may be NULL if unset) |
 |annual_turnover_indicator_code | |String |Indicator if the annual turnover is an approximated or exact value: **&lt;empty value&gt;**: not available, **0**: exact value, **1**: low end of range, **2**: approximated, **3**: modeled value  |
 |annual_turnover_indicator_description | |String |Description of the annual turnover indicator |
 |annual_turnover_usd | |Long |The company&#39;s annual turnover in US Dollar (may be NULL if unset) |
 |net_income | |Long |The company&#39;s net income in its local currency (may be NULL if unset) |
 |net_income_usd | |Long |The company&#39;s net income in US Dollar (may be NULL if unset) |
 |net_worth | |Long |The company&#39;s net worth (net value) in its local currency (may be NULL if unset) |
 |net_worth_usd | |Long |The company&#39;s net worth (net value) in US Dollar (may be NULL if unset) |
 |currency_code | |String |The local currency code of the company&#39;s headquarters country (3-letter ISO 4217 currency code) |
 |currency_name | |String |The local currency name of the company&#39;s headquarters country |
 |marketability_code | |String |Indicator if the company / branch can be used for marketing purposes: **1**: not marketable, but listed, **2**: not marketable and not listed, **3**: marketable and listed  |
 |marketability_description | |String |Description of the marketable indicator value |
 |total_employees | |Long |The total number of employees (may be NULL if unset) |
 |total_employees_indicator | |String |Indicator if the total number of employees is an approximated or exact value: **0**: exact value, **1**: low end of range, **2**: approximated  |
 |total_employees_indicator_description | |String |Description of the total number of employees indicator |
 |total_employees_physical_address | |Long |The total number of employees working at the company&#39;s headquarters (may be NULL if unset) |
 |total_employees_physical_address_indicator | |String |Indicator if the total number of employees (working at the company&#39;s headquarters) is an approximated or exact value: **&lt;empty value&gt;**: not available, **0**: exact value, **1**: low end of range, **2**: approximated or not available if the number of employees at this location is zero, **3**: modeled value  |
 |import_export_indicator | |String |Indicator if the company has an import and/or export trade: **&lt;empty value&gt;**: not available, **A**: import / export / agent, **B**: imports and exports, **C**: imports, **D**: imports and agents, **E**: exports and agents, **F**: agents, keeps no inventory, does not take title goods, **G**: not available or none, **H**: exports  |
 |import_export_indicator_description | |String |Description of the import/export indicator |
 |legal_form_code | |Long |Code of the company&#39;s legal form (may be NULL if unset) |
 |legal_form_description | |String |Description of the legal form code |
 |business_structure_code | |String |Code of the company&#39;s business structure: **&lt;empty value&gt;**: not available, **0**: single location, **1**: headquarter, **2**: branch, **4**: division,  |
 |business_structure_description | |String |Description of the business structure code |
 |business_registration_number_code | |String |Unique code describing the national registration id |
 |business_registration_number_code_description | |String |Friendly name of the business registration number code |
 |undeliverable_indicator | |String |Indicator if any of the company&#39;s information are undeliverable: **B**: both addresses are undeliverable, **M**: mail address is undeliverable, **N**: no nixie indication, **P**: physical address undeliverable, **Y**: one of the addresses is undeliverable  |
 |undeliverable_description | |String |Description of the undeliverable indicator |
 |financial_statement_date | |date |Timestamp when the financial information were updated the last time (may be full year only or full date with day, month and year) |
 |report_date | |date |Timestamp when the company&#39;s information were updated the last time (may be full year only or full date with day, month and year) |
 |is_only_available_address | |Boolean |Flag if this postal address is the only address available for the company |
 |is_subsidiary | |Boolean |Flag if this postal address is a subsidiary of the company |
 |total_employees_including_principals_indicator | |Boolean |Flag if the total number of employees includes principals |
 |is_out_of_business | |Boolean |Flag if the company is already out of business |
        h3. BusinessDataDunsSearchResponse
        ||Field Name||Required||Type||Description||
         |status | |String |Short description about the number of results found: **no result**: Could not find any company which matches the specified criteria, **single result**: We found 1 company which matches the specified criteria, **multiple results**: We found at least 2 companies which matches the specified criteria  |
 |results | |array[BusinessDataDunsSearchResult] |Collection of all found companies |
        h3. BusinessDataDunsSearchResult
        ||Field Name||Required||Type||Description||
         |company_name | |String |The official company name |
 |city | |String |The city of the company&#39;s address |
 |zip | |String |The zip of the company&#39;s address |
 |street | |String |The street of the company&#39;s address |
 |house_number | |String |The house number of the company&#39;s address |
 |duns_number | |String |The company&#39;s D-U-N-S number |
 |duns_number_hq | |String |Optional the D-U-N-S number of the company&#39;s headquarters if this isn&#39;t the headquarter |
 |phone_number | |String |The company&#39;s phone number |
 |branch_code | |String |One-letter code describing the company&#39;s branch: **B**: branch, **N**: not a branch, **H**: headquarter, **S**: single location  |
 |branch_description | |String |Description of the company&#39;s branch |
 |score | |Float |Internal ranking for all results compared with each other. the value is normalized between **0** and **1** (**1** is the best matching result and **0** the least one) |
        h3. BusinessDataUndeliverableContactsResponse
        ||Field Name||Required||Type||Description||
         |undeliverable | |String |Flag if sending a mail would result in an undeliverable state [**0**, **1**] |
 |deceased | |String |Flag if the person is deceased [**0**, **1**] |
 |moved | |String |Flag if the person has moved to a new address but we do not know the new address [**0**, **1**] |
 |new_address_available | |String |Flag if the person has moved to a new address and we know the new address [**0**, **1**] |
 |contact | |BusinessDataUndeliverableContactsSearchContact | |
        h3. BusinessDataUndeliverableContactsSearchContact
        ||Field Name||Required||Type||Description||
         |gender | |String |The person&#39;s gender (**M** or **F**) |
 |title | |String |The person&#39;s title |
 |title_of_nobility | |String |The person&#39;s title of nobility |
 |street | |String |The street the person lives in |
 |street_addition | |String |Additional street information |
 |house_number | |String |The house number of the building the person lives in |
 |house_number_addition | |String |Additional information about the house number |
 |zip | |String |The postal code of the city/region the person lives in |
 |city | |String |The city the person lives in |
 |country_code | |String |The ISO 3166-1 alpha-2 code of the country the person lives in |
 |date_of_birth | |date |The person&#39;s date of birth (yyyy-mm-dd) if available and deceased |
 |timestamp | |date |The timestamp (yyyy-mm-dd) when the database entry was created |
        h3. ConvertCapitalFirstResponse
        ||Field Name||Required||Type||Description||
         |text | |String |Text written in &#39;Capital First&#39; |
        h3. ConvertLowerCaseResponse
        ||Field Name||Required||Type||Description||
         |text | |String |Text written in all lower case |
        h3. ConvertUpperCaseResponse
        ||Field Name||Required||Type||Description||
         |text | |String |The text in upper case |
        h3. ConvertWrapResponse
        ||Field Name||Required||Type||Description||
         |text | |String |The wrapped text |
        h3. EmailDomainCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the email address is valid or not. &#39;0&#39; for invalid and &#39;1&#39; for valid email address. |
 |description | |String |Error description if syntax or mail server are invalid. Empty value means no error. |
 |status_code | |String |Unique status code for each possible validation state. &#39;10&#39; for invalid syntax, &#39;20&#39; for missing MX record, &#39;21&#39; for disposable email and &#39;1&#39; for valid email address. |
        h3. EmailExtendedCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the email address is valid or not. &#39;0&#39; for invalid and &#39;1&#39; for valid email address. &#39;unknown&#39; if mail server could not be verified. |
 |description | |String |Error description if syntax or mail server are invalid. Empty value means no error.  * **syntax**: Typo error in email address  * **domain**: No MX record found for domain part  * **disposable**: Known provider for disposable email addresses  * **mail server currently unavailable**: Connection to mail server could not be established  * **mailbox**: The mail server rejects emails for the given mailbox  * **greylisted**: The request was blocked by the mail server  * **catch all**: The mail server accepts mails for all email addresses  |
 |status_code | |String |Unique status code for each possible validation state.  * **1**: The email address has a valid syntax, a MX record exists, it&#39;s not disposable and the mailbox exists.  * **10**: Typo error in email address  * **20**: No MX record found for domain part  * **21**: Known provider for disposable email addresses  * **30**: The mail server rejects emails for the given mailbox  * **31**: Connection to mail server could not be established  * **32**: The request was blocked by the mail server (greylisted)  * **33**: The mail server accepts mails for all email addresses  |
        h3. EmailSyntaxCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the spelling is valid or not. &#39;0&#39; for invalid and &#39;1&#39; for valid syntax. |
 |status_code | |String |Unique status code for each possible validation state. &#39;10&#39; for invalid and &#39;1&#39; for valid syntax. |
        h3. ErrorForbidden
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
        h3. ErrorIncorrectParameters
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
 |error_description | |Object |Collection of validation errors for request parameters |
        h3. ErrorInternalError
        ||Field Name||Required||Type||Description||
                h3. ErrorMissingParameters
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
 |error_description | |Object |Collection for validation errors of the request parameters |
        h3. ErrorNotAllowed
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
        h3. ErrorNotFound
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
        h3. ErrorQuotaExceeded
        ||Field Name||Required||Type||Description||
         |credits | |array[String] |Description that your don&#39;t have enought available data.mill credits |
        h3. ErrorServiceUnavailable
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
        h3. ErrorUnauthorized
        ||Field Name||Required||Type||Description||
         |errorcode | |Long |Unique error code for this error |
 |errormessage | |String |Description for this error |
        h3. FirstNameGetResponse
        ||Field Name||Required||Type||Description||
         |firstname | |String |All first names found in the given full name (separated using a whitespace) |
 |name | |String |The remaining parts of the given full name |
        h3. GenderExtendedGetResponse
        ||Field Name||Required||Type||Description||
         |gender | |String |The gender of the first name where the following codes apply &#39;M&#39; for male &#39;F&#39; for female &#39;?&#39; for unknown gender  |
        h3. GenderGetResponse
        ||Field Name||Required||Type||Description||
         |gender | |String |The gender of the first name where the following codes apply &#39;M&#39; for male &#39;F&#39; for female &#39;?&#39; for unknown gender  |
        h3. IbanCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Either &#39;1&#39; if IBAN is valid otherwise &#39;0&#39; |
 |iban | |String |The formatted IBAN |
        h3. PhoneCountryCodeGetResponse
        ||Field Name||Required||Type||Description||
         |countrycode | |String |ISO 3166-1 alpha-2 country code |
 |international_prefix | |String |The international dial prefix of the specified country |
 |national_prefix | |String |The national dial prefix of the specified country |
        h3. PhoneFormatResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the spelling of the phone number is valid or not [**0**, **1**] |
 |number | |String |The phone number formatted to the canonical or custom form if valid |
 |type | |String |The determined phone number type: **PREMIUM_RATE**: premium rate, **TOLL_FREE**: toll free, **MOBILE**: mobile phone number, **FIXED_LINE**: fixed line, **FIXED_LINE_OR_MOBILE**: fixed line or mobile phone number, **SHARED_COST**: shard cost, **VOIP**: voice over ip, **PERSONAL_NUMBER**: personal number, **PAGER**: pager, **UAN**: universal access number, **VOICEMAIL**: voicemail, **UNKNOWN**: unknown connection type  |
        h3. PhoneMobileCheckResponse
        ||Field Name||Required||Type||Description||
         |phonenumber | |String |Phone number formatted to the canonical form if valid |
 |status | |String |Flag if the mobile phone number is either valid and active, valid but disabled (out of network coverage), has an invalid syntax /is unreachable, or not a mobile phone number type: **valid**: the mobile phone number is valid, **inactive**: the mobile phone number is valid but out of network coverage or is turned off, **invalid**: the mobile phone number is invalid or unreachable, **no mobile number**: the phone number is not a mobile phone number, **unknown**: the phone number could not be verified  |
        h3. UrlCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |Long |Flag if the root resource (website) is valid or not [0, 1] |
 |url | |String |The final url of the resource |
 |http_code | |Long |The HTTP status code according to https://en.wikipedia.org/wiki/List_of_HTTP_status_codes |
 |total_time | |Float |Total time of the request in seconds |
 |namelookup_time | |Float |Time until host name resolved in seconds |
 |connect_time | |Float |Time until connection established in seconds |
 |pretransfer_time | |Float |Time until file transfer began in seconds |
 |starttransfer_time | |Float |Time to first byte in seconds |
 |primary_ip | |String |IP address of the most recent connection |
 |primary_port | |Long |Destination port of the connection |
 |download_content_length | |Long |Number of bytes to download from the resource (-1 means no information available) |
 |content_type | |String |Content type of the requested resource |
 |redirects | |array[Object] |Array collection of all urls including redirects |
 |parameters | |array[Object] |Array collection of all url parameters |
        h3. VatCheckResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the VAT number is valid or not [**0**, **1**] |
 |countrycode | |String |ISO 3166-1 alpha-2 country code |
 |vatnumber | |String |Vat number part without country code |
        h3. VatResolveResponse
        ||Field Name||Required||Type||Description||
         |valid | |String |Flag if the VAT number is valid or not [0, 1] |
 |countrycode | |String |ISO 3166-1 alpha-2 country code |
 |vatnumber | |String |The verified VAT number without the country code as prefix |
 |name | |String |The official company name if VAT number is valid |
 |countryname | |String |Country name together with the language information |
 |state | |String |State name/code together with the language information |
 |county | |String |County name together with the language information (if available) |
 |city | |String |City name together with the language information |
 |zip | |String |Postal code |
 |street | |String |Street name together with the language information |
 |housenumber | |String |House number together with the language information (if available) |
 |additional_data | |String |Additional house number information (e.g. floor, apartment, top) |
 |raw_address | |String |The raw address of the company received before its split into its address parts |
 |countrycode_iso_3 | |String |ISO 3166-1 alpha-3 country code |
 |relevance | |String |Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance.  |
 |latitude | |String |Latitude to place a marker indicating the given location on a map (uses a dot as decimal point) |
 |longitude | |String |Longitude to place a marker indicating the given location on a map (uses a dot as decimal point) |
 |matchlevel | |String |The most detailed address field that matches the geo-coding query: **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...).  |
        h3. VatSearchResponse
        ||Field Name||Required||Type||Description||
         |result | |array[VatSearchResultRecord] |Collection of all other response keys, once for each company found |
        h3. VatSearchResultRecord
        ||Field Name||Required||Type||Description||
         |vatnumber | |String |The VAT numbers including the country code as prefix separated by a newline [only if uglify is set to 1] |
 |company | |String |Name of the company |
 |address | |String |Address of the company |
